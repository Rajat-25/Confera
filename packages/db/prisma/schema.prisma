

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified  DateTime?
  image     String? 
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  phone         String?        @unique


  sessions      Session[]
  contact       Contact[]
  account       Account[]

  Chats         Chat[]         @relation("UserChats")
  conversation  Conversation[] @relation("UserConversations")
}


model Conversation {
  id              String   @id @default(cuid())
  lastMessage     String?
  lastMessageAt   DateTime?
  lastMessageById String?
  
  participants    User[]   @relation("UserConversations")
  chats           Chat[]   @relation("ConversationMessages")
}

model Chat {
  id            String      @id @default(cuid())
  senderId      String
  conversationId String
 
  text          String
  createdAt     DateTime     @default(now())

  sender         User         @relation("UserChats", fields: [senderId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation("ConversationMessages",fields: [conversationId], references: [id], onDelete: Cascade)
}








model Contact {
  id        String   @id @default(cuid())
  userId    String
  fullName  String
  email     String?
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Account {
  id                String  @id @default(cuid())
 
  access_token      String?
  id_token          String?
  refresh_token     String?
  expires_at        Int?

  scope             String?
  token_type        String?

  providerAccountId String
  provider          String
  userId            String
  type              String  

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}



